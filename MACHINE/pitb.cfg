
[mcu pitb]
##  You need to select 'Communication interface' to USB in 'make menuconfig'
##  when you compile Klipper
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E66160F423669A37-if00
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66058919F846730-if00
#canbus_uuid=615a3616e60b
## Uncomment below if you're using the Raspberry uart0 to communicate with Spider
restart_method: command

# #####################################################################
# #      X/Y Stepper Settings
# #####################################################################

# [stepper_x]
# ##	Connected to MOT1 (B Motor)
# step_pin: PITB:gpio8
# dir_pin: PITB:gpio7
# enable_pin: !PITB:gpio5
# rotation_distance: 40
# microsteps: 16
# full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
# endstop_pin: tmc5160_stepper_x:virtual_endstop
# position_min: 0

# ##--------------------------------------------------------------------

# ##	Uncomment below for 250mm build
# #position_endstop: 250
# #position_max: 250

# ##	Uncomment for 300mm build
# position_endstop: 300
# position_max: 300

# ##	Uncomment for 350mm build
# #position_endstop: 350
# #position_max: 350

# ##--------------------------------------------------------------------
# homing_speed: 25   #Max 100
# homing_retract_dist: 5
# homing_positive_dir: true

# ##  Make sure to update below for your relevant driver (5160)
# [tmc5160 stepper_x]
# ## Soft SPI
# spi_software_sclk_pin: PITB:gpio2
# spi_software_mosi_pin: PITB:gpio3
# spi_software_miso_pin: PITB:gpio0
# cs_pin: PITB:gpio6
# interpolate: True
# diag1_pin: ^!PITB:gpio23
# run_current: 0.800 
# sense_resistor: 0.075
# hold_current: 0.800
# ##stealthchop_threshold: 0
# driver_TBL: 1
# driver_TOFF: 3
# driver_HEND: 3
# driver_HSTRT: 0
# #driver_PWM_LIM: 8 
# #driver_PWM_GRAD: 8
# #driver_PWM_FREQ: 1
# #driver_PWM_REG: 4
# driver_SGT: 0 # 255 is most sensitive value, 0 is least sensitive

# [stepper_y]
# ##	Connected to MOT2 (A Motor)
# step_pin: PITB:gpio12
# dir_pin: PITB:gpio11
# enable_pin: !PITB:gpio9
# rotation_distance: 40
# microsteps: 16
# full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
# endstop_pin: tmc5160_stepper_y:virtual_endstop
# position_min: 0
# ##--------------------------------------------------------------------

# ##	Uncomment for 250mm build
# #position_endstop: 250
# #position_max: 250

# ##	Uncomment for 300mm build
# position_endstop: 305
# position_max: 305

# ##	Uncomment for 350mm build
# #position_endstop: 350
# #position_max: 350

# ##--------------------------------------------------------------------
# homing_speed: 25  #Max 100
# homing_retract_dist: 5
# homing_positive_dir: true

# ##  Make sure to update below for your relevant driver (5160)
# [tmc5160 stepper_y] 
# # Soft SPI
# spi_software_sclk_pin: PITB:gpio2
# spi_software_mosi_pin: PITB:gpio3
# spi_software_miso_pin: PITB:gpio0
# cs_pin: PITB:gpio10
# diag1_pin: ^!PITB:gpio24
# interpolate: True 
# run_current: 0.8
# sense_resistor: 0.075
# hold_current: 0.8
# ##stealthchop_threshold: 0
# driver_TBL: 1
# driver_TOFF: 3
# driver_HEND: 3
# driver_HSTRT: 0
# #driver_PWM_LIM: 8 
# #driver_PWM_GRAD: 8
# #driver_PWM_FREQ: 1
# #driver_PWM_REG: 4
# driver_SGT: 0  # 255 is most sensitive value, 0 is least sensitive
# # You will need to configure a neopixel (or other addressable led, such as dotstar). See
# # https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.
# # And you can get sb led MACRO here: https://github.com/PrinterConfigs/DoomConfig/blob/master/stealthburner.cfg
# # Or here https://github.com/sttts/voron-klipper-config/blob/master/stealthburner_leds.cfg
# # [neopixel leds]
# # pin: PITB:gpio29
# # chain_count: 3
# # color_order: GRBW
# # initial_RED: 0.5
# # initial_GREEN: 0.5
# # initial_BLUE: 0.5
# # initial_WHITE: 0.5

# #####################################################################
# #      Fan
# #####################################################################

# [fan_generic fg1]
# pin: PITB:gpio20
# max_power: 1.0

# [fan_generic fg2]
# pin: PITB:gpio21
# max_power: 1.0

# [temperature_sensor chamber1]
# sensor_type: Generic 3950
# sensor_pin: PITB:gpio26
# min_temp: -200
# max_temp: 100
# gcode_id: D

# [output_pin activity_led]
# pin: PITB:gpio15

[board_pins pitb]
mcu: pitb
aliases:
    ## Board enable LED
    LED_RUN=gpio15,

    ## Can pins. STANDBY can be pulled low if you're running USB to disable the transceiver
    ## https://www.nxp.com/docs/en/data-sheet/TJA1040.pdf page 4
    CAN_TX=gpio13, CAN_RX=gpio14, CAN_STANDBY=gpio25,

    ## SPI for motors. spi_bus: spi0a
    MISO=gpio0, MOSI=gpio3, SCLK=gpio2,

    ## Stepper pins
    MOT1_EN=gpio5, MOT1_CS=gpio6,  MOT1_DIR=gpio7,  MOT1_STEP=gpio8,
    MOT2_EN=gpio9, MOT2_CS=gpio10, MOT2_DIR=gpio11, MOT2_STEP=gpio12,

    ## Endstop pins, or DIAG with jumpers
    ENDSTOP_X=gpio23, ENDSTOP_Y=gpio24,

    ## I2C bus: i2c0e
    SCL=gpio17, SDA=gpio16,

    ## Other IO
    FAN0=gpio20, FAN1=gpio21, THERM0=gpio26,
    RGB=gpio29,


[stepper_x]
step_pin = pitb:MOT1_STEP
dir_pin = !pitb:MOT1_DIR
enable_pin = !pitb:MOT1_EN
endstop_pin = tmc5160_stepper_x:virtual_endstop
## These values are for a Voron 2.4, you need to use the correct values for your printer
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
position_min = 0
position_endstop = 305
position_max = 305
homing_speed = 60
homing_positive_dir = true
homing_retract_dist = 0

[stepper_y]
step_pin = pitb:MOT2_STEP
dir_pin = !pitb:MOT2_DIR
enable_pin = !pitb:MOT2_EN
endstop_pin = tmc5160_stepper_y:virtual_endstop
## These values are for a Voron 2.4, you need to use the correct values for your printer
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
position_min = 0
position_endstop = 305
position_max = 305
homing_speed = 60
homing_positive_dir = true
homing_retract_dist = 0

[tmc5160 stepper_x]
spi_bus = spi0a
cs_pin = pitb:MOT1_CS
diag0_pin = ^!pitb:ENDSTOP_X
run_current = 1
# hold_current = 1
interpolate: False
sense_resistor = 0.075
stealthchop_threshold: 0
driver_sgt = 1

[tmc5160 stepper_y]
spi_bus = spi0a
cs_pin = pitb:MOT2_CS
diag0_pin = ^!pitb:ENDSTOP_Y
run_current = 1
# hold_current = 1
interpolate: False
sense_resistor = 0.075
stealthchop_threshold: 0
driver_sgt = 1


### Fan headers are 
# [fan pitb_fan_0]
# pin: pitb:FAN0
# max_power: 1.0

# [fan pitb_fan_1]
# pin: pitb:FAN1
# max_power: 1.0

# ### MCU temperature, not usable for chamber temperature
# [temperature_sensor pitb_mcu]
# sensor_type = temperature_mcu
# sensor_mcu = pitb

# ### Connect a spare thermistor to T0 for accurate chamber readings
# [temperature_sensor chamber]
# sensor_pin: pitb:THERM0
# pullup_resistor: 4700
# sensor_type: ATC Semitec 104GT-2
# # sensor_type: PT1000

### Configuration for https://amzn.to/3Cj2fHV, a 16 pixel ring
# [neopixel pitb]
# pin: pitb:RGB
# chain_count: 16
# color_order: GRB
# initial_RED: 0.3
# initial_GREEN: 0.3
# initial_BLUE: 0.3

### SSD1306 display, similar to https://amzn.to/3VhMmYL
# [display]
# lcd_type: ssd1306
# i2c_mcu: pitb
# i2c_bus: i2c0e
## i2c_speed: 400000  # Probably not needed